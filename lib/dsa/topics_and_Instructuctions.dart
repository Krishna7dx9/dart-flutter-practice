/*
1Ô∏è‚É£ Basics / Foundation

Time Complexity & Space Complexity (Big O, Big Œò, Big Œ©)
Recursion (including backtracking)
Iterative vs Recursive approaches
Algorithm Analysis

2Ô∏è‚É£ Arrays

Basics, traversals
Searching (Linear Search, Binary Search)
Sorting (Bubble, Selection, Insertion, Merge, Quick, Heap Sort)
Two pointers technique
Prefix Sum / Sliding Window
Kadane‚Äôs Algorithm (Maximum Subarray Sum)
Rearrangement Problems (e.g., move zeros, partition)

3Ô∏è‚É£ Strings

String manipulation and traversal
Palindrome checking
Pattern matching / substring search (Naive, KMP, Rabin-Karp)
Anagrams
String compression

4Ô∏è‚É£ Linked Lists

Singly Linked List
Doubly Linked List
Circular Linked List
Insertion, Deletion, Searching
Reverse a linked list (iterative & recursive)
Detect cycles (Floyd‚Äôs Tortoise & Hare)
Merge two sorted lists
Linked list problems (e.g., remove duplicates, middle element)

5Ô∏è‚É£ Stack & Queue

Stack (LIFO) ‚Üí push, pop, top operations
Queue (FIFO) ‚Üí enqueue, dequeue operations
Circular Queue
Priority Queue / Heap
Problems: Valid Parentheses, Min Stack
Applications: Undo/Redo, Expression Evaluation

6Ô∏è‚É£ Trees

Binary Tree
Binary Search Tree (BST)
Tree Traversals: Preorder, Inorder, Postorder (recursive & iterative)
Height / Depth of Tree
Diameter of Tree
Lowest Common Ancestor (LCA)
Balanced Trees: AVL, Red-Black
Trie (Prefix Tree)
Segment Tree / Fenwick Tree

7Ô∏è‚É£ Graphs

Representation: Adjacency Matrix / List
BFS (Breadth-First Search)
DFS (Depth-First Search)
Dijkstra‚Äôs Algorithm
Bellman-Ford Algorithm
Floyd-Warshall Algorithm
Minimum Spanning Tree (Prim, Kruskal)
Topological Sort
Connected Components / Cycles Detection

8Ô∏è‚É£ Hashing

Hash Tables / Maps / Sets
Count frequency / Detect duplicates
Two sum / Subarray sum problems
Sliding window with hash

9Ô∏è‚É£ Recursion & Backtracking

Factorial, Fibonacci
N-Queens problem
Rat in a Maze
Subsets / Permutations / Combinations
Sudoku Solver

üîü Dynamic Programming (DP)

Fibonacci / Climbing Stairs
Knapsack Problem (0-1, Unbounded)
Longest Common Subsequence (LCS)
Longest Increasing Subsequence (LIS)
Matrix Chain Multiplication
DP on Grids
DP with Bitmasking

1Ô∏è‚É£1Ô∏è‚É£ Greedy Algorithms

Activity Selection Problem
Fractional Knapsack
Minimum Spanning Tree (Prim, Kruskal)
Huffman Encoding

1Ô∏è‚É£2Ô∏è‚É£ Divide & Conquer

Merge Sort, Quick Sort
Binary Search
Maximum Subarray Sum (Kadane via divide & conquer)
Matrix Multiplication (Strassen‚Äôs Algorithm)

1Ô∏è‚É£3Ô∏è‚É£ Advanced Data Structures

Heap / Priority Queue
Disjoint Set (Union-Find)
Segment Tree / Lazy Propagation
Fenwick Tree / Binary Indexed Tree
Sparse Table
Trie

1Ô∏è‚É£4Ô∏è‚É£ Miscellaneous / Important Patterns

Sliding Window
Two Pointers
Fast & Slow Pointers
Bit Manipulation
Stack for Monotonic sequences
Greedy + DP hybrid
Matrix traversal

üîπ Pro Tip for Big Tech Interviews

Master arrays, strings, recursion, trees, graphs, hashing, and DP first.
After that, learn advanced data structures and pattern-based problem solving.
Always practice time & space analysis, as interviewers focus on efficiency.
*/